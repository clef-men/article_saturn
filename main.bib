@article{DBLP:journals/jfp/JungKJBBD18,
  author    = {Ralf Jung and
               Robbert Krebbers and
               Jacques{-}Henri Jourdan and
               Ales Bizjak and
               Lars Birkedal and
               Derek Dreyer},
  title     = {Iris from the ground up: {A} modular foundation for higher-order concurrent
               separation logic},
  journal   = {J. Funct. Program.},
  volume    = {28},
  pages     = {e20},
  year      = {2018},
  url       = {https://doi.org/10.1017/S0956796818000151},
  doi       = {10.1017/S0956796818000151},
  timestamp = {Sat, 30 Sep 2023 10:19:01 +0200},
  biburl    = {https://dblp.org/rec/journals/jfp/JungKJBBD18.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{DBLP:journals/pacmpl/MevelJP20,
  author    = {Glen M{\'{e}}vel and
               Jacques{-}Henri Jourdan and
               Fran{\c{c}}ois Pottier},
  title     = {Cosmo: a concurrent separation logic for multicore OCaml},
  journal   = {Proc. {ACM} Program. Lang.},
  volume    = {4},
  number    = {{ICFP}},
  pages     = {96:1--96:29},
  year      = {2020},
  url       = {https://doi.org/10.1145/3408978},
  doi       = {10.1145/3408978},
  timestamp = {Sun, 02 Oct 2022 15:26:02 +0200},
  biburl    = {https://dblp.org/rec/journals/pacmpl/MevelJP20.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{michael1996simple,
  title     = {Simple, fast, and practical non-blocking and blocking concurrent queue algorithms},
  author    = {Michael, Maged M. and Scott, Michael L.},
  journal   = {Proceedings of the fifteenth annual ACM symposium on Principles of distributed computing},
  year      = {1996},
  pages     = {267--275},
  publisher = {ACM},
  doi       = {10.1145/248052.248106},
  url       = {https://www.cs.rochester.edu/u/scott/papers/1996_PODC_queues.pdf}
}

@techreport{treiber1986systems,
  title       = {Systems programming: Coping with parallelism},
  author      = {Treiber, Robert K.},
  year        = {1986},
  institution = {IBM Almaden Research Center},
  number      = {RJ 5118}
}

@article{10.1145/1047659.1040315,
  author     = {Flanagan, Cormac and Godefroid, Patrice},
  title      = {Dynamic partial-order reduction for model checking software},
  year       = {2005},
  issue_date = {January 2005},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {40},
  number     = {1},
  issn       = {0362-1340},
  url        = {https://doi.org/10.1145/1047659.1040315},
  doi        = {10.1145/1047659.1040315},
  abstract   = {We present a new approach to partial-order reduction for model checking software. This approach is based on initially exploring an arbitrary interleaving of the various concurrent processes/threads, and dynamically tracking interactions between these to identify backtracking points where alternative paths in the state space need to be explored. We present examples of multi-threaded programs where our new dynamic partial-order reduction technique significantly reduces the search space, even though traditional partial-order algorithms are helpless.},
  journal    = {SIGPLAN Not.},
  month      = {jan},
  pages      = {110–121},
  numpages   = {12},
  keywords   = {software model checking, partial-order reduction}
}

  

@inproceedings{dpor05,
  author    = {Flanagan, Cormac and Godefroid, Patrice},
  title     = {Dynamic partial-order reduction for model checking software},
  year      = {2005},
  isbn      = {158113830X},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/1040305.1040315},
  doi       = {10.1145/1040305.1040315},
  abstract  = {We present a new approach to partial-order reduction for model checking software. This approach is based on initially exploring an arbitrary interleaving of the various concurrent processes/threads, and dynamically tracking interactions between these to identify backtracking points where alternative paths in the state space need to be explored. We present examples of multi-threaded programs where our new dynamic partial-order reduction technique significantly reduces the search space, even though traditional partial-order algorithms are helpless.},
  booktitle = {Proceedings of the 32nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  pages     = {110–121},
  numpages  = {12},
  keywords  = {software model checking, partial-order reduction},
  location  = {Long Beach, California, USA},
  series    = {POPL '05}
}

  

